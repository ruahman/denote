#+title:      replica sets
#+date:       [2023-05-31 Wed 18:18]
#+filetags:   :mongodb:tech:docker:
#+identifier: 20230531T181817

ensures that your data is always backed up

three or more nodes

one is primary.
- except write requests

the rest are secondary.  
- they are kept in sync with the primary
- if a primary is down, one of the secondaries can become the next primary
  
1. create a network
#+begin_src bash
  sudo docker network create mongoNet
#+end_src

2. then setup mongodb containers
#+begin_src bash
  docker run -d -p 30001:27017 --net mongoNet --name m1 mongo:4.0.4 --replSet mongoSet
#+end_src
#+begin_src bash
  docker run -d -p 30002:27017 --net mongoNet --name m2 mongo:4.0.4 --replSet mongoSet
#+end_src
#+begin_src bash
  docker run -d -p 30003:27017 --net mongoNet --name m3 mongo:4.0.4 --replSet mongoSet
#+end_src

3. login to our container
#+begin_src bash
  docker exec -it m1 mongosh
#+end_src

4. in mongosh
#+begin_src js
  config = { "_id": "mongoSet", "members":[{"_id":0, "host":"m1:27017"},{"_id":1, "host":"m2:27017"},{"_id":2, "host":"m3:27017"}] }
#+end_src
now we have to initialize the replica set
#+begin_src js
  rs.initiate(config)
#+end_src
give us details about our replica set
#+begin_src js
  rs.status()
#+end_src


* setup with docker-compose

  setup *mongo.conf*
  #+begin_src conf
    replication:
      oplogSizeMB: 1024
      replSetName: rs0
  #+end_src

  then create Dockerfile for mongo
  #+begin_src dockerfile
    FROM mongo

    WORKDIR /usr/src/configs

    COPY mongo.conf .

    EXPOSE 27017

    CMD ["--config","./mongo.conf"]
  #+end_src

  ==create a setup container==
  create a file replicaSet.js
  #+begin_src js
    
  #+end_src

  ==then create a docker-compose file==
  #+begin_src yaml
     version: "3"
     services:
       mongo-rs0-1:
	 image:"mongo-start"
	 build: ./mongo-rs0-1
	 ports:
	   - "27017:27017"
	 volumes:
	   mongo-volume1:/data/db
	 depends_on:
	   - "mongo-rs0-2"
	   - "mongo-rs0-3"
      mongo-rs0-2:
	image: "mongo"
	command: "--replSet rs0 --smallfiles --oplogSize 128"
	ports:
	  - "27018:27017"
	volumes:
	  - mongo-volume2:/data/db
     mongo-rs0-3:
       image: "mongo"
	command: "--replSet rs0 --smallfiles --oplogSize 128"
	ports:
	  - "27019:27017"
	volumes:
	  - mongo-volume3:/data/db
    volumes:
      - mongo-volume1
      - mongo-volume2
      - mongo-volume3

  #+end_src



  oplog :: operation logs
  - registers all changes made in the different collections

  all writes happen at the primary node

  secondary nodes are for replicating the primary node

  replication takes place by sending the oplog entries.
  - oplog entries keep track of all the changes made to the databse
  - oplogs are sent from the primary node to the secondary nodes so that they can replecate the data from primary.

  you can also setup sharding in a replication set 
