#+title:      redux
#+date:       [2023-05-15 Mon 15:56]
#+filetags:   :javascript:react:tech:
#+identifier: 20230515T155618

* what is redux
  a state management tool

  maintain state in one global object called the store

  single source of truth

  state is read only
  - the only way to change a state is to emmit an action

  a reducer is a central place where state modification take place
  - it takes state and action as arguments and returns a newly created state

* instalation
  #+begin_src bash
    npm install --save redux
  #+end_src
  #+begin_src bash
    npm install --save react-redux
  #+end_src
  #+begin_src bash
    npm install --save-dev redux-devtools
  #+end_src

* Core concepts
  application state is a simple javascript object
  #+begin_src javascript
    const initialState = {
       isLoading: false,
       items: [],
       hasError: false
    }; 
  #+end_src

  to change the state you need to dispatch actions

** what is an action
   a plain javascript object the describes intention to change the state
   #+begin_src javascript
     return {
        type: 'ITEMS_REQUEST', //action type
	isLoading: true //payload information
     }
   #+end_src

** reducer
   actions are dispatch to the reducer and it is there where the state is changed
   #+begin_src javascript
     const reducer = (state = initialState, action) => { //es6 arrow function
        switch (action.type) {
	   case 'ITEMS_REQUEST':
	      return Object.assign({}, state, {
		 isLoading: action.isLoading
	      })
	   default:
	      return state;
	}
     }
   #+end_src
   - The root reducer function is called with the current state and the dispatched action.
   - the reducer can devide the task beween smaller reducer function but they all work together to create one state

* Redux Store
  it an immutable object in redux,
  you can only have a single store in an application

  when ever a store is created you need to specify the reducer

  #+begin_src javascript
    import { createStore } from 'redux';
    import reducer from './reducers/reducer'
    const store = createStore(reducer);
  #+end_src

  the createStore method has three parameters
  #+begin_src javascript
    createStore(reducer, [preloadedState], [enhancer])
  #+end_src
  - the reducer returns the next state of the app
  - preloadedState, optional initial state of your app
  - enhancer, is for third party plugins

** getState
   get current state of your redux store
   #+begin_src javascript
     store.getState()
   #+end_src

** dispatch
   dispactch and action
   #+begin_src javascript
     store.dispatch({type:'ITEMS_REQUEST'})
   #+end_src

** subscribe
   callback when ever an action has been dispatched
   #+begin_src javascript
     store.subscribe(()=>{ console.log(store.getState());})
   #+end_src

** unsubscribe
   #+begin_src javascript
     const unsubscribe = store.subscribe(()=>{console.log(store.getState());});
     unsubscribe(); 
   #+end_src

* Actions
  #+begin_src javascript
    { type: GET_ORDER_STATUS , payload: {orderId,userId } }
    { type: GET_WISHLIST_ITEMS, payload: userId }
  #+end_src

** Action Creators
   they create action objects
   #+begin_src javascript
     const ITEMS_REQUEST = ‘ITEMS_REQUEST’ ;
      const ITEMS_REQUEST_SUCCESS = ‘ITEMS_REQUEST_SUCCESS’ ;
      export function itemsRequest(bool,startIndex,endIndex) {
	 let payload = {
	    isLoading: bool,
	    startIndex,
	    endIndex
	 }
	 return {
	    type: ITEMS_REQUEST,
	    payload
	 }
      }
      export function itemsRequestSuccess(bool) {
	 return {
	    type: ITEMS_REQUEST_SUCCESS,
	    isLoading: bool,
	 }
     }
   #+end_src

   it's cleaner this way
   #+begin_src javascript
     dispatch(itemsRequest(true,1, 20));
     dispatch(itemsRequestSuccess(false));
   #+end_src

* Pure Functions
  a function returns the same result for the same arguments

  reducers are always pure functions

  #+begin_src javascript
    const initialState = {
       isAddedToCart: false;
    }
    const addToCartReducer = (state = initialState, action) => { //es6 arrow function
       switch (action.type) {
	  case 'ADD_TO_CART_SUCCESS' :
	     return {
		...state,
		isAddedToCart: !state.isAddedToCart
	     }
	  default:
	     return state;
       }
    }
    export default addToCartReducer; 
  #+end_src

* Reducers
  they are the only way to change state in redux

  they accept the previous state of an app and action.
  returns a new state

  #+begin_src javascript
    const initialState = {
       isLoading: false,
       items: []
    };
    const reducer = (state = initialState, action) => {
       switch (action.type) {
	  case 'ITEMS_REQUEST':
	     // copies these objects to target
	     return Object.assign({}, state, {
		isLoading: action.payload.isLoading
	     })
	  case 'ITEMS_REQUEST_SUCCESS':
	     return Object.assign({}, state, {
		items: state.items.concat(action.items),
		isLoading: action.isLoading
	     })
	  default:
	     return state;
       }
    }
    export default reducer;
  #+end_src

** split reducers
   /reducer/orderStatusReducer.js
   #+begin_src javascript
     import { GET_ORDER_STATUS } from ‘../constants/appConstant’;
     export default function (state = {} , action) {
	switch(action.type) {
	   case GET_ORDER_STATUS:
	      return { ...state, orderStatusData: action.payload.orderStatus };
	   default:
	      return state;
	}
     }
   #+end_src

   /reducer/getWishlistDataReducer.js
   #+begin_src javascript
     import { GET_WISHLIST_ITEMS } from ‘../constants/appConstant’;
     export default function (state = {}, action) {
	switch(action.type) {
	   case GET_WISHLIST_ITEMS:
	      return { ...state, wishlistData: action.payload.wishlistData };
	   default:
	      return state;
	}
     }
   #+end_src

   combine the reducers

   /reducer/index.js
   #+begin_src javascript
     import { combineReducers } from ‘redux’;
     import OrderStatusReducer from ‘./orderStatusReducer’;
     import GetWishlistDataReducer from ‘./getWishlistDataReducer’;

     const rootReducer = combineReducers ({
	orderStatusReducer: OrderStatusReducer,
	getWishlistDataReducer: GetWishlistDataReducer
     });
     export default rootReducer;
   #+end_src

   #+begin_src javascript
     const store = createStore(rootReducer);
   #+end_src

* Middleware

  middleware is used to address the asyncronus of your app since redux is syncronus

  #+begin_src javascript
    import { createStore, applyMiddleware } from 'redux';
    import thunk from 'redux-thunk';
    import rootReducer from './reducers/index';
    const store = createStore(rootReducer, applyMiddleware(thunk));

  #+end_src

  middlewhere will allow you to define an action dispenser which returns a function instead of an action object
  #+begin_src javascript
    function getUser() {
       return function() {
	  return axios.get('/get_user_details');
       };
    }
  #+end_src

* Integrating react
  Redux provides the react-redux package to bind react components with the two utilities

  Provider :: makes the store available to the rest of the application
  Connect  :: helps react components to connect to the store

  #+begin_src javascript
    import React from 'react'
    import { render } from 'react-dom'
    import { Provider } from 'react-redux'
    import { createStore, applyMiddleware } from 'redux';
    import reducer from './reducers/reducer'
    import thunk from 'redux-thunk';
    import App from './components/app'
    import './index.css';

    const store = createStore(
       reducer,
       window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),
       applyMiddleware(thunk)
    )
    render(
       <Provider store = {store}>
	  <App />
       </Provider>,
       document.getElementById('root')
    )
  #+end_src

  #+begin_src javascript
    import { connect } from 'react-redux'
    import Listing from '../components/listing/Listing' //react component
    import makeApiCall from '../services/services' //component to make api call

    const mapStateToProps = (state) => {
       return {
	  items: state.items,
	  isLoading: state.isLoading
       };
    };
    const mapDispatchToProps = (dispatch) => {
       return {
	  fetchData: () => dispatch(makeApiCall())
       };
    };
    export default connect(mapStateToProps, mapDispatchToProps)(Listing);
  #+end_src

  #+begin_src javascript
    import axios from 'axios'
    import { itemsLoading, itemsFetchDataSuccess } from '../actions/actions'

    export default function makeApiCall() {
       return (dispatch) => {
	  dispatch(itemsLoading(true));
	  axios.get('http://api.tvmaze.com/shows')
	  .then((response) => {
	     if (response.status !== 200) {
		throw Error(response.statusText);
	     }
	     dispatch(itemsLoading(false));
	     return response;
	  })
	  .then((response) => dispatch(itemsFetchDataSuccess(response.data)))
       };
    }
  #+end_src
