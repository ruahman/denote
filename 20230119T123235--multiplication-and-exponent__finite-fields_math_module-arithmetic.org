#+title:      multiplication-and-exponent
#+date:       [2023-01-19 Thu 12:32]
#+filetags:   :finite-fields:math:module-arithmetic:
#+identifier: 20230119T123235

* Finite Field Multiplicaton and exponent
\begin{align*}
5 \cdot 3 &= 5 + 5 + 5 = 15\\
8 \cdot 7 &= 8 + 8 + 8 + \dots = 136 
\end{align*}

- given $F_{19}$ we can do the same with finite-field arithmetic
  
  \begin{align*}
  5 \cdot_f 3 &= 5 +_f 5 +_f 5 = 15\mod 19 = 15\\
  8 \cdot_f 7 &= 8 +_f 8 +_f 8 +_f \dots = (8 \cdot 17) \mod 19 = 136 \mod 19 = 3
  \end{align*}

- exponents are simply
  \begin{align*}
  7^3 = 7 \cdot_f 7 \cdot_f 7 = 343 \mod 19 = 1
  \end{align*}



** python implementation

#+begin_src python :results output
  prime = 97
  print(95*45*31 % prime)
  print(17*13*19*44 % prime)
  print(12**7 * 77**49 % prime)
#+end_src

#+RESULTS:
: 23
: 68
: 63

- if we multiply each element in set $F_{19}$ by $k = 1,3,7,13,18$,
  what do the sets look like

#+begin_src python :results output
  prime=19
  for k in (1,3,7,13,18):
      print(sorted([k*i % prime for i in range(prime)]))
#+end_src
- this shows Fermat's little theorem
#+RESULTS:
: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
- they are result in the same $F_{19}

#+begin_src python :results output
  class FieldElement:

      def __init__(self, num, prime):
          if num >= prime or num < 0:
              raise ValueError(f"{num} is not in finite field {prime}")
          self.num = num
          self.prime = prime

      def __repr__(self):
          return f"FieldElement_{self.prime}({self.num})"

      def __eq__(self, other):
          if other is None:
              return False
          return self.num == other.num and self.prime == other.prime

      def __ne__(self, other):
          return not (self == other)

      def __add__(self, other):
          if self.prime != other.prime:
              raise TypeError("they dont belong to the same finite-field")
          num = (self.num + other.num) % self.prime
          return self.__class__(num, other.prime)

      def __sub__(self, other):
          if self.prime != other.prime:
              raise TypeError("they dont belong to the same finite-field")
          num = (self.num - other.num) % self.prime
          return self.__class__(num, other.prime)

      def __mul__(self, other):
          if self.prime != other.prime:
              raise TypeError("they dont belong to the same finite-field")
          num = (self.num * other.num) % self.prime
          return self.__class__(num, other.prime)

  a = FieldElement(7, 13)
  b = FieldElement(12, 13)
  c = FieldElement(6, 13)

  print(a*b==c)
  
#+end_src

#+RESULTS:
: True
